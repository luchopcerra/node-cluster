// This is a file generated by the yeoman generator hapijs

/**
 * Controller which handles requests/responses relating to foo
 *
 * @type {fooDao|exports}
 */
var fooDao = require('./foo-dao');
var Boom = require('boom');

var cluster = require('cluster');

/**
 * Creates a foo
 *
 * @param req
 * @param reply
 */
exports.create = function (req, reply) {

	fooDao.create(req.payload, function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/**
 * Gets all foos
 *
 * @param req
 * @param reply
 */
exports.find = function (req, reply) {

	fooDao.find(function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/**
 * Get a specific foo by id
 *
 * @param req
 * @param reply
 */
exports.findById = function (req, reply) {

	fooDao.findById(req.params.id, function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/**
 * Update a specific foo by id
 *
 * @param req
 * @param reply
 */
exports.update = function (req, reply) {

	fooDao.update(req.params.id, req.payload, function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/**
 * Remove a specific foo by id
 *
 * @param req
 * @param reply
 */
exports.remove = function (req, reply) {

	fooDao.remove(req.params.id, function (err, data) {
		if (err) {
			return reply(Boom.wrap(err));
		}
		reply(data);
	});
};

/**
 * sleep x ms then return flow
 *
 * @param req
 * @param reply
 */


exports.sleepController = function (req, reply) {


   console.log('time was ' + req.params.time);
	let timeout = new Promise(r => setTimeout(r, req.params.time));
	timeout
	.then(()=>reply('finish: request handle by worker: ' + cluster.worker.id))
	.catch(()=>reply('error'));

};

/* Add new methods above */
